Nos dias de hoje, quando metodologias ágeis, aplicações em camadas, Fábrica de Software e outras formas e jargões que pululam nos meios de Programação Corporativa que focam cada vez mais para a questão da componentização, o desacoplamento total, faz-se necessário que o Desenvolvedor siga estas tendências e se aprofunde nestes assuntos, nos deparamos com estas situações em nosso quotidiano. Um exemplo disso é que você, leitor que gosta de fazer seus Sistemas para uso Vpessoal para auxiliar no dia a dia e se depara com uma situação de Real World bastante comum. você é um usuário assíduo de um Sistema Web que transforma o usuário em um tecnico de Futebol e de acordo com o Campeonato Naicional vigente, os jogadores que você tem em seu plantel virtual valorizam ou desvalorizam, você compra novos jogadores, vende os antigos e vai fazendo o seu nome no jogo. Como todo desenvolvedor, também prefere automatizar certo processo, você descobre que o Site dispõe de um Serviço e integração utilizando arquivos JSON (nota do DevMan) e XML. De pronto, você faz uma modelagem rápida de uma aplicação web bem simples usando Classes básicas de POST e GET, ou seja, Response e Request, bem básicas. Implementa e pronto! você tem o seu controlador para consumir os serviços do site, pode ter em tempo real - como um Home Broker (Nota do DevMan) - e poder melhorar seu aproveitamento no jogo, tendo mais informações para tomar melhores decisões. Lendo até agora sobre o nosso Sistema já temos Relatórios Gerencias, Acesso a Dados, Camada de Negócios e Camada de Apresentação, mesmo estas "camadas" se mesclando ou mesmo sendo um sistema simples apenas para seu próprio uso que foi criado por diversão para melhorar suas habilidades em um simulador.
Um belo dia um dos seus amigos vai te visitar em casa e, que também é frequentador assíduo do mesmo site, mas sem o mesmo recurso que você, vê o seu Sistema para consumir os serviços do Site e se interessa muito e lhe pede uma cópia, neste momento você coça a cabeça e pensa: e agora? tudo o que eu fiz foi pensando apenas na minha necessidade. Isso quer dizer que o Sistema é feito com Classes estáticas sem nenhum foco em reuso, sem nenhum foco em Serviços. É neste ponto, para que você possa sair deste tipo de armadilha da vida, que este artigo foi escrito. Voltando ao pedido do seu amigo, você pára, pensa, coça o queixo e diz a ele que vai precisar corrigir o programa e se ele quiser, eles podem juntar mais amigos, criar um domínio, hospedar em um bom provedor e ficaria ali na web para todos eles acessarem mediante autenticação no Servidor. Claro que o colega adorou a idéia, porém, você não se sentiu muito confortável, você não conhece muito a fundo este negócio de "reuso", baixo acoplamento? alta coesão? O que é isso? Então, estudando mais a fundo na Internet e revstas especializadas, tais como as da DevMedia, você ficou sabendo sobre a tal programação em 3 camadas, utilizando componentização, Interfaces Expostas e etc etc etc, o seu Sistema de Consumo de estatísticas do Simulador web já começa a entrar na sua mente. Você pega a sua aplicação antiga e totalmente engessada e a olha de um outro paradigma: o Paradigma das Aplicações Corporativas, onde cada módulo é feito separadamente, mas são testados em conjunto, contendo outros tipos de Objetos como Interfaces, Classes Abstratas, Classes Genéricas, Padrões de Projetos, e então seu sistema pessoal e simples de controle podendo ser até mesmo uma agenda telefônica  programada sem muita seriedade para GUI em seu notebook ou tablet, já começa a ser visto com outros olhos: um olhar mais voltado na reutilização que é a base da Programação Orientada a Objetos. A sua pergunta será: "O que isso tem a ver com o Spring.NET e Injeção de Dependências e Inversão de Controlew?" a resposta é: tudo! pois será justamente o Spring como um container de IoC e DI que irá fazer toda esta "mágica" para você, colocar o leitor no mundo do Reuso, dos Padrões de Projetos, dos Serviços (Nota do DevMan). Neste nosso artigo, não faremos nenhum Sistema que consuma informaçoes de sites de Simuladores de Futebol, modelaremos uma Agenda de Contatos de forma que o leitor compreenda de forma definitiva as tecnologias mais utilizadas pela Biblioteca Spring.Core do Spring.NET.

(Nota do DevMan: Home Broker: Aplicativo utilizado para verificar cotações em tempo Real da Bolsa de  Valores. Consome um Objeto de Rest, Webservice ou SOA da BOVESPA ou BM&F).

(Nota do DevMan: a palavra serviço significa acesso a uma camada externa de aplicação ou Obejetos tais como Interfaces, Classes Abstratas ou Classes Genéricas)